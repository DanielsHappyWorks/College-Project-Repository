package Controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;

import Model.IFilter;
import Model.Show;

public class ShowManager {
	private File file;
	private String strName;
	private String strPath;
	private String strPermissions;
	private RandomAccessFile raf;

	// constructor
	public ShowManager(String strPath, String strName, String strPermissions) {
		this.strPath = strPath;
		this.strName = strName;
		this.strPermissions = strPermissions;

		File folder = new File(this.strPath);
		if (folder.exists() == false)
			folder.mkdirs();

		this.file = new File(this.strPath + this.strName);
	}

	// open
	public boolean open() {
		try {
			if (this.raf == null)
				this.raf = new RandomAccessFile(this.file, this.strPermissions);
			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		}
	}

	// close
	public boolean close() {
		try {
			if (this.raf != null) {
				this.raf.close();
				this.raf = null;
			}
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}

	// read and write record
	public Show read(int index) {
		try {
			raf.seek(0);
			raf.skipBytes(index * Show.size);
			return Show.read(this.raf);
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	// write with index, this is also the function we use for editing
	public void write(Show show, int index) {
		try {
			raf.seek(0);
			raf.skipBytes(index * Show.size);
			Show.write(this.raf, show);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// write at the end
	public void write(Show show) {
		int index = this.size();
		write(show, index);
	}

	// size
	public int size() {
		return (int) this.file.length() / Show.size;
	}

	// print
	public void print() {
		// set pointer to 0
		try {
			this.raf.seek(0);
			;
		} catch (IOException e) {
			e.printStackTrace();
		}

		// get record count
		int showCount = this.size();
		Show show = null;

		// iterate through and print
		for (int i = 0; i < showCount; i++) {
			show = read(i);
			System.out.println(show);
		}
	}

	// delete
	public void delete(int index) {
		try {
			Show show = read(size() -1);

			for (int i = 0; i <= 15; i++) {
				write(Show.deleteRandom, index); // overwrite 15 times to stop from recovering
			}

			write(show, index);
			raf.setLength(size() -1 * Show.size);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// delete all
	public void deleteAll() {
		try {
			raf.setLength(0);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// find
	public void find(IFilter<Show> filter) {
		HashMap<Integer, Show> hMap = new HashMap<Integer, Show>();

		// set pointer to 0
		try {
			this.raf.seek(0);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// get record count
		int showCount = this.size();
		Show obj = null;

		// iterate through and add position and object into hashmap
		for (int i = 0; i < showCount; i++) {
			obj = read(i);
			if (filter.matches(obj)) {
				hMap.put(i, obj);
			}
		}
		
		//prints the hashmap
		for(Integer key : hMap.keySet()) {
			   System.out.println("Index: "+key+" Show: "+hMap.get(key));
		}
	}
}
