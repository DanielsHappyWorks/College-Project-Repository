package Controller;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.RandomAccess;

import Model.Show;

public class ShowManager 
{
	private File file;
	private String strName;
	private String strPath;
	private String strPermissions;
	private RandomAccessFile raf;

	//constructor
	public ShowManager(String strPath, String strName, String strPermissions)
	{
		this.strPath = strPath;
	    this.strName = strName;
	    this.strPermissions = strPermissions;
	    
	    File folder = new File(this.strPath);
	    if(folder.exists() == false)
	    	folder.mkdirs();
	    
	    this.file = new File(this.strPath + this.strName);
	}
	
	//open
	public boolean open(){
		try {
			if(this.raf == null)
				this.raf = new RandomAccessFile(this.file, this.strPermissions);
			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		}
	}
	//close
	public boolean close(){
		try {
			if(this.raf != null){
				this.raf.close();
				this.raf = null;
			}
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	//read and write record
	public Show read(int index)
	{
		try {
			raf.seek(0);
			raf.skipBytes(index * Show.size);
			return Show.read(this.raf);
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
	//write with index
	public void write(Show show, int index)
	{
		try {
			raf.seek(0);
			raf.skipBytes(index * Show.size);
			Show.write(this.raf, show);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//write at the end
	public void write(Show show)
	{
		int index = this.size();
		write(show, index);
	}
	
	//size
	public int size()
	{
		return (int)this.file.length()/Show.size;
	}
	
	//print
	public void print()
	{	
		//set pointer to 0
		try 
		{
			this.raf.seek(0);;
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		
		//get record count
		int showCount = this.size();
		Show show = null;
		
		//iterate through and print
		for(int i = 0; i < showCount; i++)
		{
			show = read(i);
			System.out.println(show);
		}
	}
	
	//delete
	public void delete(int index)
	{	
		
	}
	//delete all
	public void deleteAll()
	{	
		
	}
	//find
	public void find()
	{	
		
	}
	//edit, 
	public void edit()
	{	
		
	}
}
